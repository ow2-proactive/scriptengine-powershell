apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'maven'
apply from: "$rootDir/gradle/ext/coding-format.gradle"

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_8

mainClassName = 'jsr223.powershell.Main'
defaultTasks 'installApp'

buildscript {
    repositories {
        if (project.hasProperty('local')) {
            mavenLocal()
        }
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven { url 'http://repository.activeeon.com/content/groups/proactive/' }
    }

    dependencies {
        classpath "com.diffplug.gradle.spotless:spotless:2.4.0"
        classpath "org.ow2.proactive:coding-rules:1.0.0"
    }

    dependencies {
        delete "gradle/ext"
        ant.unjar src: configurations.classpath.find { it.name.startsWith("coding-rules") }, dest: 'gradle/ext'
    }
}

rootProject.buildscript.repositories.each {
    repositories.add(it)
}

// Configure the maven repository deployment
install {
    repositories.mavenInstaller {
        // Set the version
        pom.version = project.version
        // Set the group/namespace for the maven repository deployment.
        pom.groupId = project.groupId
        // Give the artifact a 'base name' (The version is added to the 'base name')
        pom.artifactId = project.artifactId
    }
}

configurations {
    provided
    nativeLib
}

sourceSets {
    main {
        compileClasspath += configurations.provided
    }
}

idea {
    module {
        scopes.PROVIDED.plus += [configurations.provided]
    }
}

dependencies {
    provided "org.ow2.proactive:scheduler-api:${schedulingVersion}"
    provided "org.ow2.proactive:scheduler-node:${schedulingVersion}"

    testCompile "org.ow2.proactive:scheduler-api:${schedulingVersion}"
    testCompile "org.ow2.proactive:scheduler-node:${schedulingVersion}"

    // jni4net requires jar and dll to be in the same directory, accordingly, it is difficult to use the maven jar artifact
    compile files("${projectDir}/tools/jni4net.j-0.8.8.0.jar")
    provided 'commons-io:commons-io:2.5'
    provided 'org.apache.commons:commons-lang3:3.4'
    provided 'log4j:log4j:1.2.17'
    //compile 'net.sf.jni4net:jni4net.j:0.8.8.0'

    runtime files("${projectDir}/tools/jni4net.n-0.8.8.0.dll")
    runtime files("${projectDir}/tools/jni4net.n.w64.v40-0.8.8.0.dll")
    runtime files("${projectDir}/tools/jni4net.n.w32.v40-0.8.8.0.dll")
    runtime files("${projectDir}/tools/jni4net.n.w64.v20-0.8.8.0.dll")
    runtime files("${projectDir}/tools/jni4net.n.w32.v20-0.8.8.0.dll")
    runtime files("${projectDir}/tools/jsr223utils.dll")

    nativeLib files("${projectDir}/tools/jni4net.j-0.8.8.0.jar")
    nativeLib files("${projectDir}/tools/jni4net.n-0.8.8.0.dll")
    nativeLib files("${projectDir}/tools/jni4net.n.w64.v40-0.8.8.0.dll")
    nativeLib files("${projectDir}/tools/jni4net.n.w32.v40-0.8.8.0.dll")
    nativeLib files("${projectDir}/tools/jni4net.n.w64.v20-0.8.8.0.dll")
    nativeLib files("${projectDir}/tools/jni4net.n.w32.v20-0.8.8.0.dll")
    nativeLib files("${projectDir}/tools/jsr223utils.dll")

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'com.google.guava:guava:19.0'
}

task nativeLibJar(type: Jar) {
    classifier = 'native'
    from configurations.nativeLib
}

artifacts {
    archives nativeLibJar
}

// Upload the archives to the nexus repository. For execution, that needs to have
// the username and password set in the command line by -DnexusUsername=[username]
// and -DnexusPassword=[password]
uploadArchives {
    repositories {
        mavenDeployer {
            // Set the version
            pom.version = project.version
            // Set the group/namespace for the maven repository deployment.
            pom.groupId = project.groupId
            // Give the artifact a 'base name' (The version is added to the 'base name')
            pom.artifactId = project.artifactId

            snapshotRepository(url: "http://repository.activeeon.com/content/repositories/snapshots/") {
                authentication(userName: "${System.getProperty('nexusUsername')}",
                        password: "${System.getProperty('nexusPassword')}")
            }
            repository(url: "http://repository.activeeon.com/content/repositories/releases/") {
                authentication(userName: "${System.getProperty('nexusUsername')}",
                        password: "${System.getProperty('nexusPassword')}")
            }
        }
    }
}
